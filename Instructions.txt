

			// ************************
			// Make sure to set Env Varialbes either in system level or in eclipse level for
			// :
			// Please set ENV variable:
			// goto Run -> Run Configuration -> Environment and uncomment and copy paste
			// below 4 lines

			// ANDROID_HOME=/Users/nilambardas/Library/Android/sdk
			// APPIUM_PATH=/usr/local/bin/appium
			// JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home/
			// NODE_PATH=/usr/local/bin/node
			// ************************
			
			
Steps to follow for IOS/Android automation:

1.Install JDK
2.Install Android Studio
3.Eclipse(Maven, TestNG should be installed from Eclipse -> Help -> market place)
4.Set Environment Variables using a terminal
a.On Terminal type - open -e .bash_profile
b.export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home
export ANDROID_HOME=/Users/<username>/Library/Android/sdk
export PATH=$/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home/bin:$PATH
export PATH="/Users/ <username> /Library/Android/sdk/platform-tools":$PATH
c.You should also set the Environment Variables in Eclipse. Steps you’ll get in Eclipse Section.

Step 1: Install all the pre-requisites for Appium:
1.Install the latest Xcode Desktop version.
2.Install Xcode command line (use Command: Xcode-select --install)
3.Install Homebrew with below command:
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
4.brew install npm
5.Install NodeJS
6.npm install carthage 
7.npm install -g appium
8.npm install appium-doctor -g
9.Sudo gem install xcpretty
10.brew install libimobiledevice –HEAD
11.npm install -g ios-deploy
Step 2: Download Appium Desktop and install it
Now, download the latest Appium desktop version from the below link and install it.
https://github.com/appium/appium-desktop/releases
And, here download Appium-mac-1.15.1.dmg and install.
Online Resources:
To Setup Appium follow this article untill Step 9(Must), follow rest of the steps if required : 
https://krishnachetan.medium.com/setup-appium-on-mac-1e06f1178427

Installing WebDriver Agent on IOS device  = https://support.smartbear.com/testcomplete/docs/app-testing/mobile/device-cloud/configure-appium/ios-on-mac.html

Alternate:
https://www.mutuallyhuman.com/blog/webdriveragent-getting-started-with-automated-ios-testing/

Step 3: Setting up WebdriverAgent in XCode
This is a very important setup and needs to be done very carefully, otherwise, you will not be able to launch the Appium app.
(i) Open the terminal and go to WebDriverAgent folder within the Appium installation directory. 
It will be found at the below place:
/Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-webdriveragent
Or
Goto Applications Folder in IFinder, select right click on appium application and select show package contents then move to the location which is above.
Now, run below two commands:
1) mkdir -p Resources/WebDriverAgent.bundle
2) ./Scripts/bootstrap.sh -d
(ii) Connect your iOS device with the system and open WebDriverAgent.xcodeproj in Xcode. For both the WebDriverAgentLib and WebDriverAgentRunner targets, select "Automatically manage signing" checkbox in the "General" tab, and then select your Development Team. This should also auto select Signing Certificate.

You need to provide Apple developer account credentials to select the team.
Xcode maybe fail to create a provisioning profile for the WebDriverAgentRunner, this needs manual change to the bundle id for the target. Go into the "Build Settings" tab, and change the "Product Bundle Identifier" from com.facebook.WebDriverAgentRunner to something unique that Xcode will accept: like - com.facebooksss.WebDriverAgentRunner.
Similarly, setup WebDriverAgentLib and Integration App in Xcode. Then run (build) integration app. To run the Integration App, Apple id is required, and it should be trusted on a real iPhone device from:
Settings > General > Device Management.
Here click on the Apple id to trust it.
Now close Xcode (end tasks pop up appears), and quit Xcode then run below test command with udid within WebDriverAgent destination on terminal:
xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=<udid>' test

Command to list Booted/Available IOS devics / Simulators.
xcrun simctl list | grep 'Booted'

Once Webdriver Agent is builded and installed in the IOS device either by hiting the start button in xcode or by typing the command given above verify it once by doing the following steps:
1.Open Appium Desktop Application.
2.Then start the Appium server then open the Inspector by clicking lens icon at the top left corner.
3.Select Desired Capabilitis tab and add new Capability similar to the below one:

4.Replace udid and app path. Refer Google to know more about the capabilities available.
5.Now click Start Session and check you device/simulator if the app is getting installed and launched. If it is launched then everything is configured correctly and ready to go with Automation Testing.


Eclipse:
1.Make sure you have Testng and maven installed in you eclipse.
2.Import the Automation Test Project into Eclipse.
3.Right click on the Parent folder and select Maven -> Maven Update and tick Offline check box and  Update the Dependencies required for the Project.
4.You will see three files in the Project folder named Dev.xml(DEV Environment), Regression.xml(QA Environment), Prod.xml(Production Environment)

5.Right click on any one .xml file based on the Environment you want to run and select Run as -> Testng Suite.
6.You will get Green Mark once the Execution is completed and now the Result would have generate you can find it under Result Folder.













Note:
The Steps provided may not work exactly in your machine after some months/years,
Use it as a reference and also refer Internet for Latest/Extra Steps to be followed.

Documentation Done by : Nagaraj R(vndratosnr)